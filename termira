#!/usr/bin/env python3

import configparser
import curses
import json
import locale
import logging
from curses.textpad import Textbox
from datetime import datetime, timedelta
from jira import JIRA
from jira.exceptions import JIRAError
from os import path, chdir
from requests.exceptions import RequestException
from signal import signal, SIGCHLD, SIG_IGN
from subprocess import Popen, check_output, DEVNULL
from sys import maxsize
from textwrap import wrap
from time import sleep
from traceback import print_exc


COLORS = {
    'default': 0,
    'bar': 1,
    'error': 2,
}

chdir(path.dirname(path.abspath(__file__)))

locale.setlocale(locale.LC_ALL, '')

# Disable logging to stdout
# Even though the Jira library has an option to disable logging, there
# are still some error messages displayed, for example when connection
# errors occur. All our error handling happens inside termira, additional
# error messages just mess with the layout. Get rid of those messages.
logging.disable(maxsize)

config = configparser.ConfigParser()
query = ''

try:
    termira_version = check_output(['git', 'describe', '--always']).decode('utf-8').strip()
except:
    termira_version = 'vUNKNOWN'



def line(msg, width):
    return msg[:width] + ' ' * (width - len(msg))



def addstr(win, *args, **kwargs):
    try:
        win.addstr(*args, **kwargs)
    except curses.error:
        pass



def title(win, msg):
    height, width = win.getmaxyx()
    addstr(win, 0, 0, line(msg, width), curses.color_pair(COLORS['bar']))



def status(win, msg, color='bar'):
    height, width = win.getmaxyx()
    addstr(win, height - 1, 0, line(msg, width), curses.color_pair(COLORS[color]))



def refresh_indicator(refresh_delta, refresh_every):
    fraction = refresh_delta.total_seconds() / refresh_every.total_seconds()
    fraction = max(0, min(1, fraction))
    fill_len = 10
    fill = int(fill_len * fraction)
    fill_pad = fill_len - fill
    msg = '█' * fill + '░' * fill_pad

    return msg



def textbox_input_validator(key):
    if key in ['KEY_BACKSPACE', '\b', 127]:
        return curses.KEY_BACKSPACE

    return key



def query_string(win, prompt):
    height, width = win.getmaxyx()
    addstr(win, height - 1, 0, prompt, curses.color_pair(COLORS['bar']))
    curses.curs_set(True)
    win.refresh()

    editwin = curses.newwin(1, width - len(prompt), height - 1, len(prompt))
    box = Textbox(editwin)
    box.edit(textbox_input_validator)
    out = box.gather()

    curses.curs_set(False)
    del editwin
    win.touchwin()
    win.refresh()

    return out.strip()



def show_help_screen(win):
    msg = '''
    q        Quit program
    ?        Help

    r        Refresh
    R        Reload Queries from config (resets query selection to first in list)

    t        Transition Issue

    l        Open Issue Permalink

    j, k     Scroll one line down / up
    g, G     Scroll to top / bottom
    ^F, ^G   Scroll half a page down / up
    '''

    height, width = win.getmaxyx()
    at_y = margin = 2
    for m in msg.strip().splitlines():
        if at_y >= height - margin:
            break

        m = m.strip()
        addstr(win, at_y, margin, m, curses.color_pair(COLORS['default']))
        at_y += 1

    at_y += margin*2
    query_key_length = 5

    for query in config['queries'].keys():
        if len(query) > query_key_length:
            query_key_length = len(query)

    format_string = '{:>' + str(query_key_length) + 's}  {:s}'

    addstr(win, at_y, margin, format_string.format('Alias', 'JQL'))
    at_y += 1

    for alias, query in config['queries'].items():
        if at_y >= height - margin:
            break

        addstr(win, at_y, margin, format_string.format(alias, query))
        at_y +=1



def show_transition(screen, offset, current, issues):
    height, width = screen.getmaxyx()
    y = margin = 2

    try:
        issue = issues[current].key
        summary = issues[current].fields.summary

        transitions = jira.transitions(issue)
    except:
        addstr(screen, margin, margin, 'Error while getting transitions')

        return False

    addstr(screen, y, margin, issue+': '+summary)

    y += 2

    for t in transitions:
        addstr(screen, y, margin, '{:5s}  {:s}'.format(t['id'], t['name']))

        y += 1

    transition = query_string(screen, 'Transition ID: ')

    for t in transitions:
        if transition == t['id']:
            jira.transition_issue(issue, t['id'])
            status(screen, 'Transitioning to '+t['name'])

            return True

    return False



def fmt_date(jira_date, fmt):
    # FIXME Support time zones
    # That [0:19] strips away the time zone info because Python does not
    # understand that. Use dateutil or a similar library.
    return datetime.fromisoformat(jira_date[0:19]).strftime(fmt)



def fmt_line(line_dict, columns, lens, total_max_width):
    # "columns" dictates the order of fields and which of them to show.
    # Takes a dict (the individual columns) and a dict of lengths.
    # Creates a string where each column is padded to the given length.
    # The total length, however, will not exceed "total_max_width".

    # Show header instead of an issue. Quick hack: Construct a dummy
    # dict on the fly.
    if line_dict is None:
        line_dict = {}
        for i in columns:
            line_dict[i] = i

    formatted_tuples = []
    for col_key in columns:
        element = line_dict[col_key]
        max_len = lens[col_key]
        # Truncate individual columns if they exceed the configured
        # length.
        if len(element) > max_len:
            element = element[:max_len - 1] + '…'
        formatted_tuples.append(('{:' + str(max_len) + 's}').format(element))
    out = '  '.join(formatted_tuples)
    # Truncate final output if needed.
    if len(out) > total_max_width:
        out = out[:total_max_width - 1] + '…'
    return out



def show_issues(screen, offset, current, issues, columns, date_format):
    height, width = screen.getmaxyx()

    margin_top = margin_bottom = 1

    to_wrap = issues[current].fields.description
    if to_wrap is None:
        to_wrap = ''

    description_lines = []
    for orig_line in to_wrap.strip().splitlines():
        # wrap() returns an empty list for an empty string as input, but
        # we want to keep empty lines as separators.
        if orig_line.strip() == '':
            description_lines.append('')
        else:
            wrapped_lines = wrap(
                orig_line,
                replace_whitespace=False,
                width=width,
            )
            for wrapped_line in wrapped_lines:
                description_lines.append(wrapped_line)

    description_lines = description_lines[:10]
    while len(description_lines) > 0 and description_lines[-1] == '':
        description_lines.pop()

    additional_lines_needed = len(description_lines) + 1

    usable_height_for_items = height - margin_top - margin_bottom - additional_lines_needed
    if usable_height_for_items <= 0:
        return 0

    # scroll the upper half of the window if currently selected issue
    # is not visible, because there are too many description_lines
    if (current - offset) >= (usable_height_for_items - 1):
        offset = max(current - usable_height_for_items + 2, 0)

    # Collect lines to show. For now, we collect a list of tuples, where
    # each item of a tuple corresponds to a column.
    lines = []
    for issue in issues:
        formatted = {
            'Created': fmt_date(issue.fields.created, date_format),
            'Creator': issue.fields.creator.displayName,
            'Key': issue.key,
            'Status': issue.fields.status.name,
            'Summary': issue.fields.summary,
            'Updated': fmt_date(issue.fields.updated, date_format),
        }

        if issue.fields.assignee:
            formatted['Assignee'] = issue.fields.assignee.displayName
        else:
            formatted['Assignee'] = ''

        lines.append(formatted)

    # Find max length for each column. Later on, columns may get padded
    # to this length if they're too short.
    lens = {}
    for col_key in columns:
        for issue_fmt in lines:
            element = issue_fmt[col_key]
            curmax = lens.get(col_key, len(col_key))
            lens[col_key] = max(curmax, len(element))

    # "Summary" is special. All the other columns behave nicely, but
    # Summary can grow very large or stay very short. We will make this
    # the one column that just gets all the remaining space (but a
    # minimum width of 10).
    if 'Summary' in columns:
        consumed = 0
        for idx, l in lens.items():
            if idx != 'Summary':
                consumed += l + 2  # + 2 because of padding between columns
        lens['Summary'] = max(width - consumed, 10)

    # Note that, when we show lines, we truncate them to "width" either
    # way. Allows us to handle very small screens.
    addstr(screen, margin_top, 0, fmt_line(None, columns, lens, width))

    y = margin_top + 1
    for i, issue in enumerate(lines[offset:]):
        if y >= margin_top + usable_height_for_items:
            break

        attrs = curses.color_pair(COLORS['default'])

        if i + offset == current:
            attrs |= curses.A_REVERSE

        addstr(screen, y, 0, fmt_line(issue, columns, lens, width), attrs)

        y += 1

    y = margin_top + usable_height_for_items


    # comments and watchers may or may not be present, so we just wrap
    # everything in a try..except to ignore all errors, same as we do
    # with description
    watchers = '???'

    try:
        watchers = issues[current].fields.watches.watchCount
    except AttributeError:
        pass

    addstr(screen, y, 0, line('{key} {summary} | {watchers} watcher{ws} | Created on {created} | Last updated on {updated}'.format(
            key=issues[current].key,
            summary=issues[current].fields.summary,
            watchers=watchers,
            ws='' if watchers == 1 else 's',
            created=fmt_date(issues[current].fields.created, date_format),
            updated=fmt_date(issues[current].fields.updated, date_format),
        ), width), curses.color_pair(COLORS['bar']))

    y += 1

    for description_line in description_lines:
        addstr(screen, y, 0, description_line)

        y += 1



def open_permalink(link):
    if 'permalink' not in config['external']:
        return

    args = config['external']['permalink'].split(' ')

    signal(SIGCHLD, SIG_IGN)

    args_now = []
    for a in args:
        if a == '__LINK__':
            args_now.append(link)
        else:
            args_now.append(a)

    Popen(args_now, stdout=DEVNULL, stderr=DEVNULL)



def assign_issue(screen, issues, current, assignee):
    issue = issues[current]

    status(screen, 'Assigning {} to {}'.format(issue.key, assignee))

    jira.assign_issue(issue.key, assignee)



def termira(screen):
    global config, query

    curses.curs_set(False)
    curses.use_default_colors()
    curses.init_pair(COLORS['bar'], curses.COLOR_WHITE, curses.COLOR_BLUE)
    curses.init_pair(COLORS['error'], curses.COLOR_BLACK, curses.COLOR_RED)

    refresh_every = timedelta(seconds=30)
    refresh_delta = timedelta(seconds=0)

    issues = None
    force_refresh = True

    current = 0
    offset = 0

    current_mode = 'overview'
    last_mode = ''
    error = ''

    while True:
        height, width = screen.getmaxyx()

        columns = config['columns']['show'].split(',')

        if force_refresh and query != '':
            status(screen, '██████████  Refreshing ...', 'error' if current_mode=='error' else 'bar')
            screen.refresh()

            refresh_delta = timedelta(seconds=0)
            refresh_every = timedelta(seconds=30)
            force_refresh = False

            try:
                issues = jira.search_issues(query, maxResults=False)

                if current >= len(issues):
                    current = len(issues) - 1

                if offset >= len(issues):
                    offset = len(issues) - 1

                current_mode = 'overview'
            except JIRAError as e:
                error = repr(e)
                current_mode = 'error'
            except RequestException as e:
                error = repr(e)
                current_mode = 'error'

            last_key = datetime.now()

        screen.erase()

        if current_mode == 'help':
            title(screen, 'termira {} | q: Quit | ?: leave help screen'.format(termira_version))
            status(screen, '')
            show_help_screen(screen)

        elif current_mode == 'overview':
            title(screen, 'termira {} | q: Quit | ?: Help/JQL list | {} Issues returned by search'.format(termira_version, len(issues)))

            try:
                show_issues(screen, offset, current, issues, columns, config['date']['format'])

                status(screen, refresh_indicator(refresh_delta, refresh_every) + '  ' + query)
            except Exception as e:
                addstr(screen, 2, 0, repr(e))
                status(screen, refresh_indicator(refresh_delta, refresh_every) + '  An Error occured while rendering issue view. Press [R] to reset to default view.', 'error')

        elif current_mode == 'transition':
            title(screen, 'termira {} | Enter transition ID or press enter to leave'.format(termira_version))
            force_refresh = show_transition(screen, offset, current, issues)
            current_mode = 'overview'

        elif current_mode == 'error':
            title(screen, 'termira {} | q: Quit | ?: Help/JQL list'.format(termira_version))
            addstr(screen, 2, 0, error)
            status(screen, refresh_indicator(refresh_delta, refresh_every) + '  An Error occured while getting data from Jira. Retrying automatically', 'error')

        screen.refresh()
        screen.timeout(1000)


        try:
            char = screen.getkey()
        except:
            char = None
        screen.timeout(-1)

        if char in ['q']:
            return

        if char in ['l']:
            open_permalink(issues[current].permalink())

        if char in ['i']:
            assign_issue(screen, issues, current, config['jira']['user'])
            force_refresh = True

        if char in ['t']:
            current_mode = 'transition'

        if char in ['r']:
            force_refresh = True
            current_mode = 'overview'

        if char in ['R']:
            config_tmp = configparser.ConfigParser()
            config_tmp.read(path.expanduser('~/.termira.ini'))

            if len(config_tmp['queries'].keys()) > 0:
                config = config_tmp

                q_list = list(config['queries'].keys())
                query = config['queries'][q_list[0]]
                force_refresh = True

            current_mode = 'overview'

        if char in ['f']:
            q = query_string(screen, 'filter alias or JQL: ')

            if q in config['queries']:
                force_refresh = True
                query = config['queries'][q]
            elif q != '':
                force_refresh = True
                query = q

            current_mode = 'overview'

        if char in ['?', 'h']:
            if current_mode == 'help':
                current_mode = last_mode

            else:
                last_mode = current_mode
                current_mode = 'help'


        bottompad = starty = 2

        if char in ['j', 'KEY_DOWN']: current += 1
        if char in ['k', 'KEY_UP']: current -= 1

        if char in ['g', 'KEY_HOME']: current = 0
        if char in ['G', 'KEY_END']: current = len(issues) - 1

        if current < 0:
            current = 0
        if current >= len(issues):
            current = len(issues) - 1

        if current - offset >= (height - bottompad) - starty:
            offset = current - (height - bottompad) + starty + 1
        if current - offset <= -1:
            offset = current

        if offset < 0:
            offset = 0
        if offset >= len(issues):
            offset = len(issues) - 1

        if char is not None:
            last_key = datetime.now()
            refresh_delta = timedelta(seconds=0)
        else:
            refresh_delta = datetime.now() - last_key
            if refresh_delta > refresh_every:
                force_refresh = True
                last_key = datetime.now()



if __name__ == '__main__':
    while True:
        try:
            config.read(path.expanduser('~/.termira.ini'))

            if 'jira' not in config:
                raise KeyError("Required Group 'jira' is missing in config")

            if not config['jira']['url'].endswith('/'):
                raise ValueError('Jira URL must end with /')

            jira = JIRA(config['jira']['url'], auth=(config['jira']['user'], config['jira']['pass']), timeout=10, async_=True, max_retries=2)

            queries = list(config['queries'].keys())
            if len(queries) < 1:
                raise KeyError('No Queries defined in config')

            query = config['queries'][queries[0]]

            curses.wrapper(termira)
            exit(0)
        except Exception:
            print('It appears we had a whoopsie. Please report this.')
            print()
            print_exc()
            print()
            input('Press enter to reset and continue.')
